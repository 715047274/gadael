{
  "_args": [
    [
      {
        "raw": "mongoose-path-tree@git://github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
        "scope": null,
        "escapedName": "mongoose-path-tree",
        "name": "mongoose-path-tree",
        "rawSpec": "git://github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
        "spec": "git://github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
          "sshUrl": "git+ssh://git@github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
          "httpsUrl": "git+https://github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
          "gitUrl": "git://github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
          "shortcut": "github:velichkov/mongoose-path-tree#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
          "directUrl": "https://raw.githubusercontent.com/velichkov/mongoose-path-tree/139629ceca7ec19e394ae27c0ca01ad442fbb8d5/package.json"
        }
      },
      "/mnt/pce-data/downloads/tmp/gadael"
    ]
  ],
  "_from": "git://github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
  "_id": "mongoose-path-tree@1.3.5",
  "_inCache": true,
  "_location": "/mongoose-path-tree",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongoose-path-tree@git://github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
    "scope": null,
    "escapedName": "mongoose-path-tree",
    "name": "mongoose-path-tree",
    "rawSpec": "git://github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
    "spec": "git://github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
      "sshUrl": "git+ssh://git@github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
      "httpsUrl": "git+https://github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
      "gitUrl": "git://github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
      "shortcut": "github:velichkov/mongoose-path-tree#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
      "directUrl": "https://raw.githubusercontent.com/velichkov/mongoose-path-tree/139629ceca7ec19e394ae27c0ca01ad442fbb8d5/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
  "_shasum": "96ac5ece9f3b5cedbf52a29383d247b0387f4c55",
  "_shrinkwrap": null,
  "_spec": "mongoose-path-tree@git://github.com/velichkov/mongoose-path-tree.git#139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
  "_where": "/mnt/pce-data/downloads/tmp/gadael",
  "author": {
    "name": "Brian Kirchoff",
    "email": "briankircho@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/swayf/mongoose-path-tree/issues"
  },
  "contributors": [
    {
      "name": "Lourenzo Ferreira",
      "email": "lourenzo@gmail.com",
      "url": "http://lourenzo.blog.br"
    },
    {
      "name": "Franck Tab",
      "email": "franck.tab@gmail.com"
    },
    {
      "name": "Tomáš Holas",
      "email": "tomas.holas@gmail.com"
    },
    {
      "name": "Oleg Butovich",
      "email": "obutovich@gmail.com"
    },
    {
      "name": "Jake Dempsey",
      "email": "angelo0000@gmail.com"
    },
    {
      "name": "Alban Escalier",
      "url": "DaWyz"
    }
  ],
  "dependencies": {
    "mongoose": "^4.4.12",
    "stream-worker": "^1.0.1"
  },
  "description": "Maintaied version of materialized path hierarchy for mongoose with reparent option",
  "devDependencies": {
    "async": "^1.5.2",
    "codeclimate-test-reporter": "^0.3.1",
    "istanbul": "^0.4.3",
    "lodash": "^4.11.1",
    "mocha": "^2.4.5",
    "shortid": "^2.2.6",
    "should": "^8.3.1"
  },
  "directories": {
    "test": "test"
  },
  "engine": "node >= 0.8.0",
  "gitHead": "139629ceca7ec19e394ae27c0ca01ad442fbb8d5",
  "homepage": "https://github.com/swayf/mongoose-path-tree",
  "keywords": [
    "mongoose",
    "materialized",
    "path",
    "tree",
    "mongodb"
  ],
  "license": "BSD",
  "main": "index.js",
  "name": "mongoose-path-tree",
  "optionalDependencies": {},
  "readme": "## mongoose-path-tree\n[![Build Status](https://travis-ci.org/swayf/mongoose-path-tree.png)](https://travis-ci.org/swayf/mongoose-path-tree)\n\n[![Code Climate](https://codeclimate.com/github/velichkov/mongoose-path-tree/badges/gpa.svg)](https://codeclimate.com/github/velichkov/mongoose-path-tree)\n[![Test Coverage](https://codeclimate.com/github/velichkov/mongoose-path-tree/badges/coverage.svg)](https://codeclimate.com/github/velichkov/mongoose-path-tree/coverage)\n[![Issue Count](https://codeclimate.com/github/velichkov/mongoose-path-tree/badges/issue_count.svg)](https://codeclimate.com/github/velichkov/mongoose-path-tree)\n\n[![Dependency Status](https://david-dm.org/swayf/mongoose-path-tree.svg)](https://david-dm.org/swayf/mongoose-path-tree)\n[![devDependency Status](https://david-dm.org/swayf/mongoose-path-tree/dev-status.svg)](https://david-dm.org/swayf/mongoose-path-tree#info=devDependencies)\n\nImplements the materialized path strategy with cascade child re-parenting on delete for storing a hierarchy of documents with mongoose\nVersion with all collected features and fixes from mongoose-tree, mongoose-tree-fix, mongoose-tree2, mongoose-reparenting-tree\n\n# Usage\n\nInstall via NPM\n\n    $ npm install mongoose-path-tree\n\n## Options\n\n```javascript\nModel.plugin(tree, {\n  pathSeparator : '#',              // Path separator. Default: '#'\n  onDelete :      'REPARENT',       // Can be set to 'DELETE' or 'REPARENT'. Default: 'DELETE'\n  numWorkers:     5,                // Number of stream workers. Default: 5\n  idType:         Schema.ObjectId   // Type used for _id. Can be, for example, String generated by shortid module. Default: Schema.ObjectId\n})\n```\n\nThen you can use the plugin on your schemas\n\n```javascript\nvar tree = require('mongoose-path-tree');\n\nvar UserSchema = new Schema({\n  name : String\n});\nUserSchema.plugin(tree);\nvar User = mongoose.model('User', UserSchema);\n\nvar adam = new User({ name : 'Adam' });\nvar bob = new User({ name : 'Bob' });\nvar carol = new User({ name : 'Carol' });\n\n// Set the parent relationships\nbob.parent = adam;\ncarol.parent = bob;\n\nadam.save(function() {\n  bob.save(function() {\n    carol.save();\n  });\n});\n```\n\nAt this point in mongoDB you will have documents similar to\n\n    {\n      \"_id\" : ObjectId(\"50136e40c78c4b9403000001\"),\n      \"name\" : \"Adam\",\n      \"path\" : \"50136e40c78c4b9403000001\"\n    }\n    {\n      \"_id\" : ObjectId(\"50136e40c78c4b9403000002\"),\n      \"name\" : \"Bob\",\n      \"parent\" : ObjectId(\"50136e40c78c4b9403000001\"),\n      \"path\" : \"50136e40c78c4b9403000001#50136e40c78c4b9403000002\"\n    }\n    {\n      \"_id\" : ObjectId(\"50136e40c78c4b9403000003\"),\n      \"name\" : \"Carol\",\n      \"parent\" : ObjectId(\"50136e40c78c4b9403000002\"),\n      \"path\" : \"50136e40c78c4b9403000001#50136e40c78c4b9403000002#50136e40c78c4b9403000003\"\n    }\n\nThe path is used for recursive methods and is kept up to date by the plugin if the parent is changed\n\n# API\n\n### getChildren\n\nSignature:\n\n    getChildren([filters], [fields], [options], [recursive], cb);\n\nargs are additional filters if needed.\nif recursive is supplied and true, subchildren are returned\n\nBased on the above hierarchy:\n\n```javascript\nadam.getChildren(function(err, users) {\n  // users is an array of with the bob document\n});\n\nadam.getChildren(true, function(err, users) {\n  // users is an array with both bob and carol documents\n});\n```\n\n### getChildrenTree\n\nSignature as method:\n\n    getChildrenTree([args], cb);\n\nSignature as static:\n\n    getChildrenTree([rootDoc], [args], cb);\n\nreturn a recursive tree of sub-children.\n\nargs is an object you can defined with theses properties :\n\n    filters: mongoose query filter, optional, default null\n      example: filters: {owner:myId}\n\n    fields: mongoose fields, optional, default null (all fields)\n      example: fields: \"_id name owner\"\n\n    options: mongoose query option, optional, default null\n      example: options:{{sort:'-name'}}\n\n    minLevel: level at which will start the search, default 1\n      example: minLevel:2\n\n    recursive: boolean, default true\n      make the search recursive or only fetch children for the specified level\n      example: recursive:false\n\n    allowEmptyChildren: boolean, default true\n      if true, every child not having children will have 'children' attribute (empty array)\n      if false, every child not having children will not have 'children' attribute\n\n    Example :\n\n```javascript\nvar args = {\n  filters: {owner:myId},\n  fields: \"_id name owner\",\n  minLevel:2,\n  recursive:true,\n  allowEmptyChildren:false\n}\n\ngetChildrenTree(args,myCallback);\n```\n\nBased on the above hierarchy:\n\n```javascript\nadam.getChildrenTree( function(err, users) {\n\n    /* if you dump users, you will have something like this :\n    {\n      \"_id\" : ObjectId(\"50136e40c78c4b9403000001\"),\n      \"name\" : \"Adam\",\n      \"path\" : \"50136e40c78c4b9403000001\"\n      \"children\" : [{\n          \"_id\" : ObjectId(\"50136e40c78c4b9403000002\"),\n          \"name\" : \"Bob\",\n          \"parent\" : ObjectId(\"50136e40c78c4b9403000001\"),\n          \"path\" : \"50136e40c78c4b9403000001#50136e40c78c4b9403000002\"\n          \"children\" : [{\n              \"_id\" : ObjectId(\"50136e40c78c4b9403000003\"),\n              \"name\" : \"Carol\",\n              \"parent\" : ObjectId(\"50136e40c78c4b9403000002\"),\n              \"path\" : \"50136e40c78c4b9403000001#50136e40c78c4b9403000002#50136e40c78c4b9403000003\"\n          }]\n      }]\n    }\n    */\n\n});\n\n```\n\n### getAncestors\n\nSignature:\n\n    getAncestors([filters], [fields], [options], cb);\n\nBased on the above hierarchy:\n\n```javascript\ncarol.getAncestors(function(err, users) {\n  // users is an array of adam and bob\n})\n```\n\n### level\n\nEqual to the level of the hierarchy\n\n```javascript\ncarol.level; // equals 3\n```\n\n# Tests\n\nTo run the tests install mocha\n\n    npm install mocha -g\n\nand then run\n\n    mocha\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/swayf/mongoose-path-tree.git"
  },
  "scripts": {
    "test": "istanbul cover ./node_modules/.bin/_mocha"
  },
  "version": "1.3.5"
}
